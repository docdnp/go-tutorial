#!/usr/bin/env bash
PROJECT=go-tutorial
TUTORIALNB=notebooks/GolangTutorial.ipynb
BUILDWORKSPACE=build/config/home.jupyter.lab/workspaces
DOCKERIMG=docker.io/thednp/go-tutorial
DOCKERIMGDEPR=docker.io/thednp/gotutorial
DOCKERCACHE=$DOCKERIMG-cache
DOCKERBUILDER=$PROJECT
DOCKERBUILDOPTS='--network=host'
DOCKERFILE=build/Dockerfile
GOPHERHOME=./$PROJECT.d
GOPHERWORKSPACE=$GOPHERHOME/.jupyter/lab/workspaces
VERSION=$(date +v%y.%j.%H%M)
BUILD_VERSION=false
BUILD_USE_CACHE=false
BUILD_USE_BUILDX=false
BUILD_PUSH=false
CURL=curl
JQ=jq
PATH=$PWD/.tools:$PATH

# Check and fix preconditions where possible
installed () { command -v "$1" >&/dev/null; }
installed docker || { echo "Error: docker missing, see: https://docs.docker.com/engine/install"; exit 1; }
installed $CURL  || CURL="docker run -i --rm curlimages/curl"
installed $JQ    || {
  echo "Installing '$JQ' locally under: .tools/$JQ"
  mkdir -p .tools
  $CURL -s https://jqlang.github.io/jq/download/ \
    | grep -Eoi 'https.*jq-'$(uname)'[^\"]+' \
    | sort | tail -1 \
    | xargs $CURL -o /dev/stdout --progress-bar -L > .tools/jq \
    && chmod +x .tools/jq
} 

docker-buildx-create () {
  local DRIVER_OPTS=$(echo $DOCKERBUILDOPTS | sed -re 's|--|--driver-opt=|g')
  docker buildx ls | grep ^. | grep ^$DOCKERBUILDER >&/dev/null \
    || docker buildx create $DRIVER_OPTS --name $DOCKERBUILDER --use --driver=docker-container
}

docker-buildx-build () {
  local write_cache=${1:-false} push=${2:-false} read_cache=${3:-true} opt=$4
  docker buildx build  \
    $($read_cache    && echo --cache-from "type=registry,ref=$DOCKERCACHE") \
    $($write_cache   && echo --cache-to   "type=registry,ref=$DOCKERCACHE") \
    $(! $read_cache  && ! $write_cache && echo --no-cache) \
    --attest type=provenance,mode=min \
    --output "type=image,push=$push" -t $DOCKERIMG:latest $opt \
    -f $DOCKERFILE .
}

build () {
  local RETURN_CODE=0
  echo $VERSION > VERSION
  if $BUILD_USE_BUILDX ; then
    docker-buildx-create && \
      docker-buildx-build $BUILD_USE_CACHE $BUILD_PUSH $BUILD_USE_CACHE $($BUILD_VERSION && echo -t=$DOCKERIMG:$VERSION)
  else
    docker build $DOCKERBUILDOPTS -f $DOCKERFILE  -t $DOCKERIMG:latest \
      $([[ "$1" =~ "^all|with-version$" ]] && echo -t $DOCKERIMG:$VERSION || echo -n "") . && \
    $BUILD_PUSH && {
      docker push $DOCKERIMG:latest
      docker push $DOCKERIMG:$VERSION
    }
  fi
  RETURN_CODE=$?
  rm VERSION
  return $RETURN_CODE
}

storeNotebook () {
  [ -e $GOPHERHOME/$TUTORIALNB ] \
    && cat $GOPHERHOME/$TUTORIALNB \
        | jq '.cells[] |= del(.outputs,.execution_count)' | tee $TUTORIALNB >&/dev/null
}

storeWorkspaceSettings () {
  ls -1t $GOPHERWORKSPACE/default* >&/dev/null | tail -1 \
      | xargs cat | tee $BUILDWORKSPACE/default* >&/dev/null
}

store () {
  storeNotebook
  storeWorkspaceSettings
}

exiterr () { [ -n "$@" ] && echo "Error: $@"
echo "\
Usage: $0 [Options]

  --use-version                                  auto-generate version tag
  --use-cache                                    use registry cache (enforces --use-buildx)
  --use-buildx                                   use buildx builder (basis for caching)
  --use-push                                     push after building
  --use-split                                    split $DOCKERFILE RUN command to multiple 
                                                 steps (for debugging)
" && exit 1; }

while [ -n "$1" ] ; do case "$1" in
  --use-split)    shift; cat $DOCKERFILE | build/scripts/dockerfile-split > $DOCKERFILE.split; DOCKERFILE=$DOCKERFILE.split;;
  --use-cache)    shift; BUILD_USE_BUILDX=true; BUILD_USE_CACHE=true;;
  --use-version)  shift; BUILD_VERSION=true;;
  --use-buildx)   shift; BUILD_USE_BUILDX=true;;
  --push)         shift; BUILD_PUSH=true;;
  *)              exiterr "unknown option: $1";;
esac; done

store
build
