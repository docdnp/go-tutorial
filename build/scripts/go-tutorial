#!/usr/bin/env bash
PROJECT=go-tutorial
DOCKERIMG=thednp/go-tutorial
DOCKERNAME=$PROJECT-$USER
DOCKEROPTS="--rm -p 8888:8888 --name $DOCKERNAME"
DOCKERUSER="--user $(id -u):$(id -g)"
GOPHERHOME=./$PROJECT.d
TUTORIALNB=notebooks/GolangTutorial.ipynb

usage () {
cat <<EOF
go-tutorial [command]

  Control tutorial            (start, stop and enter either local or pure --docker tutorial)

    start       [--docker]    Start the tutorial.
    stop        [--docker]    Stop the tutorial.
    url         [--docker]    Get the URL of the tutorial.
    shell       [--docker]    Execute a shell environment in the running container.

  Control local environment   (create or rm local environment)

    init-local                Create a local directory with all settings, the notebook and
                              the example scripts. If this directory exists, "start" will
                              use it automatically. 
    rm-local                  Remove local directory.

EOF
}

in-docker () { [ "$1" == "--docker" ]; }

start-docker-standalone () {
  docker run -d ${DOCKEROPTS/8888/8889}-docker $DOCKERIMG start >&/dev/null \
    || restart "$@"
  url "$@"
}

start-docker-local-includes () {
    docker run $DOCKERUSER -d $DOCKEROPTS \
            -v $GOPHERHOME/notebooks:/home/gopher/notebooks \
            -v $GOPHERHOME/.local/share/jupyter:/home/gopher/.local/share/jupyter \
            -v $GOPHERHOME/.jupyter/lab:/home/gopher/.jupyter/lab \
               $DOCKERIMG start >&/dev/null \
    || restart "$@"
    echo "Mounted local home directory: $GOPHERHOME"
    url "$@"
}

init-local () {
  mkdir -p ./$GOPHERHOME/notebooks && {
    echo -n "Create temporary container: $DOCKERNAME: " \
    && docker create $DOCKERUSER --name $DOCKERNAME $DOCKERIMG 2>&1 \
      && echo Copying files... \
      && docker cp -aq $DOCKERNAME:/home/gopher/.jupyter  ./$GOPHERHOME \
      && docker cp -aq $DOCKERNAME:/home/gopher/.local    ./$GOPHERHOME \
      && docker cp -aq $DOCKERNAME:/home/gopher/notebooks ./$GOPHERHOME \
    && echo -n "Remove temporary container: " && docker rm $DOCKERNAME \
    && echo Successfully created: ./$PROJECT && return 0
  } 
  echo -n "Remove temporary container: " && docker rm $DOCKERNAME
  echo "Couldn't create local user directory. Cleaning up." && rm -rf ./$GOPHERHOME
  return 1
}

rm-local () { rm -rf $GOPHERHOME; }

restart () {
    read -p "Restart? [Enter=yes/n] " restart
    [ -z "$restart" ] && {
      echo "Restarting..." 
      stop "$@"; sleep 1
      exec -a $PROJECT "$0" start "$@"
    }
}

start () {
    local start=start-docker-standalone
    [ -d $GOPHERHOME ] && start=start-docker-local-includes
    in-docker "$1" && start=start-docker-standalone
    $start "$@"
}

stop  () { 
  local container=${1:-DOCKERNAME}
  [ $container == "--docker" ] && container=$DOCKERNAME-docker
  docker kill $container >&/dev/null && echo "Stopped $container"
  [ $container == "$DOCKERNAME" ] && rm -rf $GOPHERHOME/.local/share/jupyter/runtime
}

call  () { 
  local mode="$1" cmd="$2" container=${3:-DOCKERNAME}
  [ $container == "--docker" ] && container=$DOCKERNAME-docker
  $mode docker exec -it $container "$cmd"
}
shell   () { call exec bash "$@"; }
url     () { call ""   url  "$@" | { 
  in-docker "$1" && sed -re 's/8888/8889/' || tee
  }
}

case "$1" in
  start)      shift; start "$@";;
  stop)       shift; stop  "$@";;
  shell)      shift; shell "$@";;
  url)        shift; url   "$@";;
  rm-local)   rm-local;;
  init-local) init-local;;
  *)          usage ;;
esac
